---
import Layout from "../../layouts/AppLayout.astro";
import PlayerShell from "../../components/PlayerShell.tsx";
import AuthGuard from "../../components/AuthGuard.tsx";
import { supabaseClient } from "../../db/supabase.client";
import { DEFAULT_USER_ID } from "../../db/supabase.client";

export const prerender = false;

// Get notebook ID from params
const { notebookId } = Astro.params;
const startPhraseId = Astro.url.searchParams.get("start_phrase_id");

// Validate notebook ID format (UUID)
const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
if (!notebookId || !uuidRegex.test(notebookId)) {
  return Astro.redirect("/notebooks");
}

// Validate start_phrase_id if provided
if (startPhraseId && !uuidRegex.test(startPhraseId)) {
  return Astro.redirect(`/player/${notebookId}`);
}

// Development mode: Use service role key to bypass RLS for notebook verification
let supabase = supabaseClient;
if (import.meta.env.NODE_ENV === "development") {
  const supabaseUrl = import.meta.env.SUPABASE_URL;
  const supabaseServiceKey = import.meta.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (supabaseServiceKey) {
    const { createClient } = await import("@supabase/supabase-js");
    supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: { autoRefreshToken: false, persistSession: false }
    });
  }
}

// Verify notebook exists (in development, we bypass ownership checks)
const { data: notebook, error: notebookError } = await supabase
  .from("notebooks")
  .select("id, name")
  .eq("id", notebookId)
  .single();

if (notebookError || !notebook) {
  return Astro.redirect("/notebooks");
}
---

<Layout title={`Player - ${notebook.name}`}>
  <main class="min-h-screen bg-gray-900 text-white">
    <AuthGuard>
      <PlayerShell 
        notebookId={notebookId} 
        startPhraseId={startPhraseId || undefined}
      />
    </AuthGuard>
  </main>
</Layout>
